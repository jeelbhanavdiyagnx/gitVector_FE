
let mode = 'remoteserver'
let domain = mode === 'localserver' ? 'http://localhost:1338/' : 'https://api.gitvector.io'
let appConfig = {
  socketURL: domain,
  loginUrl: domain + '/api/v1/user/login',
  register: domain + '/api/v1/user/register',
  githubOrgs: domain + '/api/v1/github/orgs',
  getAddNewOrgList: domain + '/api/v1/github/getAddNewOrgList',
  getOrgs: domain + '/api/v1/gitorg',
  gitRepos: domain,
  me: domain + '/api/v1/me',
  github: domain + '/api/v1/user/auth/github/connect',
  repoAdd: domain + '/api/v1/repo?limit=-1',
  gitUsers: domain + '/api/v1/gituser',
  editUser: domain + '/api/v1/user/updateme',
  editPassword: domain + '/api/v1/user/updatepassword',
  contributorsUrl: (org, repo) => `${domain}/api/v1/github/repos/${org}/${repo}/contributors`,
  commitsUrl: (repo, user, branch, date) => `${domain}/api/v1/commit?repo=${repo}&&gitUser=${user}&&branches=${branch}&&createdAt_gt=${date.from}&createdAt_lt=${date.to}`,
  commitsRepoUrl: (repo, skip) => `${domain}/api/v1/commit?repo=${repo}&&limit=10&&skip=${skip}`,
  commitsUserBranchUrl: (repo, user, branch) => `${domain}/api/v1/commit?repo=${repo}&&gitUser=${user}&&branches=${branch}`,
  commitsUserDateRangeUrl: (repo, user, date) => `${domain}/api/v1/commit?repo=${repo}&&gitUser=${user}&&createdAt_gt=${date.from}&createdAt_lt=${date.to}`,
  commitsBranchUrl: ( repo,branch) => `${domain}/api/v1/commit?repo=${repo}&&branches=${branch}`,
  commitsUserRepoUrl: (repo, user, skip) => `${domain}/api/v1/commit?repo=${repo}&&gitUser=${user}&&limit=10&&skip=${skip}`,
  commitsDateRangeUrl: (date, repo) => `${domain}/api/v1/commit?createdAt_gt=${date.from}&createdAt_lt=${date.to}&&repo=${repo}`,
  commitsBranchDateRangeUrl: (date, branch) => `${domain}/api/v1/commit?createdAt_gt=${date.from}&createdAt_lt=${date.to}&&branches=${branch}`,
  branchUrl: (repo) => `${domain}/api/v1/branch?repo=${repo}&&limit=-1`,
  getUserRepos: (user) => `${domain}/api/v1/repo?gitUser=${user}`,
  getOrgOverview: (org) => `${domain}/api/v1/orgs/${org}/dashboard`,
  getOrgUserPerformanceChart: (org) => `${domain}/api/v1/orgs/${org}/userPerformanceChart`,
  getOrgRepoAvgScoreChart: (org) => `${domain}/api/v1/orgs/${org}/repoAvgScoreChart`,
  getOrgHeatMap:(org)=>`${domain}/api/v1/orgs/${org}/contributionHeatmap`,
  getRepoOverview: (repo) => `${domain}/api/v1/repos/${repo}/dashboard`,
  getRepoHeatMap: (repo) => `${domain}/api/v1/repos/${repo}/contributionHeatmap`,
  getRepoUserPerformanceChart: (repo) => `${domain}/api/v1/repos/${repo}/userPerformanceChart`,//org in place of repo
  getRepoUserPerformance: (repo) => `${domain}/api/v1/repos/${repo}/repoUserPerformance`,
  getCommitFrequencyChart: (repo) => `${domain}/api/v1/repos/${repo}/getCommitFrequencyChart`,
  getUserCommitFrequencyChart: (user) => `${domain}/api/v1/users/${user}/getCommitFrequencyChart`,
  getUserParticipationRatio: (repo) => `${domain}/api/v1/repos/${repo}/userParticipationRatio`, //only user
  getRepoClassificationChart: (repo) => `${domain}/api/v1/repos/${repo}/classificationChart`,
  getUserOverview: (user) => `${domain}/api/v1/users/${user}/dashboard`,
  getUserHeatMap: (user) => `${domain}/api/v1/users/${user}/contributionHeatmap`,
  getUserComparisonChart: (user1,user2) => `${domain}/api/v1/peerToPeerComparison?user1=${user1}&user2=${user2}`,
  getUserClassificationChart: (user,type) => `${domain}/api/v1/users/${user}/classificationChart`,
  getUserRepoLevelPerformance: (user, repo) => `${domain}/api/v1/users/${user}/repositoryLevelPerformance?repo=${repo}`,
  getUserCodeQualityChart: (user) => `${domain}/api/v1/users/${user}/codeQualityChart`,
  getUserRepoParticipation: (user) => `${domain}/api/v1/users/${user}/repositoryParticipation`,
  getGlobalConfig: domain + '/api/v1/globalConfig',
  getRepoActivity: (repo) => `${domain}/api/v1/repos/${repo}/activity`,
  getOrgActivity: (org) => `${domain}/api/v1/orgs/${org}/activity`,
  getUserActivity: (user) => `${domain}/api/v1/users/${user}/activity`,
  getOrgAlerts: (org) => `${domain}/api/v1/notification?org=${org}&sort=createdAt:desc`,
  getRepoAlerts: (repo) => `${domain}/api/v1/notification?repo=${repo}`,
  getUserAlerts: (user) => `${domain}/api/v1/notification?user=${user}&sort=createdAt:desc`,
  sendInvite: domain + '/api/v1/user/adduserbyemails',
  getInviteUsers: domain +  '/api/v1/github/getInviteUsers',
  commitTable:(repo)=>`${domain}/api/v1/repos/${repo}/userCommitPerformance`,
  userCommitTable: (user) => `${domain}/api/v1/users/${user}/repoCommitPerformance`,
  removeRepo: (repo) => `${domain}/api/v1/repo/${repo}`,
  getOrgTotalCommits: (orgId) => `${domain}/api/v1/getCommitsCount?org=${orgId}`,
  getRepoTotalCommits: (repoId) => `${domain}/api/v1/getCommitsCount?repo=${repoId}`,
  getInvitedUserData: (id) => `${domain}/api/v1/invitedUser/${id}`
}

export default appConfig;
